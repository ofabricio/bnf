[Test]
Test '...' string.

[Give]
\ \
''
'\''
'one'
'\'one\''
'one\'two\'three'
'\'one\'two\'three\''

[When]
root = '\\' SP '\\\\'r (NL str)*
 str = '\'([^\'\\\\]|\\\\.)*\''r

[Then]
[Group]
    [Ident] \
    [Ident] \
    [Ident] ''
    [Ident] '\''
    [Ident] 'one'
    [Ident] '\'one\''
    [Ident] 'one\'two\'three'
    [Ident] '\'one\'two\'three\''


[Test]
Test that empty string '' doesn't lead to an infinite loop.

[Give]
a

[When]
v = ''*

[Then]
[Error]


[Test]
Test that '...'r is a regular expression.

[Give]
One    Two

[When]
root = 'One' '\s+'r 'Two'

[Then]
[Group]
    [Ident] One
    [Ident]     
    [Ident] Two


[Test]
Test that '...'i prevents a token from being emitted.

[Give]
OneTwoThreeFour

[When]
root = 'One'i 'Two' 'Three'i 'Four'

[Then]
[Group]
    [Ident] Two
    [Ident] Four


[Test]
Test that "And" is using a new variable when looping, instead of "out" directly.

[Give]
acbaab

[When]
root = ( 'a' 'a' | '.'ri ) *

[Then]
[Group]
    [Ident] a
    [Ident] a


[Test]
Test that "And" is reseting the scanner when it fails.
It would output: "[Ident] a [Ident] , [Ident] a" if not reseting.

[Give]
(a,a,)

[When]
root = '('i 'a' (',' 'a')* ')'i

[Then]
[Error]


[Test]
Test that "And" is reseting the scanner when it fails with JOIN.
It would output: "[Ident] a,a" if not reseting.

[Give]
(a,a,)

[When]
root = JOIN( '('i 'a' (',' 'a')* ')'i )

[Then]
[Error]


[Test]
Test the * quantifier. It must match zero, one or many.

[Give]
OneTwo OneOneTwo Two

[When]
root = 'One'* 'Two' ' 'i 'One'* 'Two' ' 'i 'One'* 'Two'

[Then]
[Group]
    [Ident] One
    [Ident] Two
    [Ident] One
    [Ident] One
    [Ident] Two
    [Ident] Two


[Test]
Test the + quantifier. It must match one or many.

[Give]
OneTwo OneOneTwo Two

[When]
root = 'One'+ 'Two' ' 'i 'One'+ 'Two' ' 'i ( 'One'+ | 'Two' )

[Then]
[Group]
    [Ident] One
    [Ident] Two
    [Ident] One
    [Ident] One
    [Ident] Two
    [Ident] Two


[Test]
Test the ? quantifier. It must match zero or one.

[Give]
OneTwo Two OneOneTwo

[When]
root = 'One'? 'Two' ' 'i 'One'? 'Two' ' 'i 'One'? 'OneTwo'

[Then]
[Group]
    [Ident] One
    [Ident] Two
    [Ident] Two
    [Ident] One
    [Ident] OneTwo


[Test]
Test ANYNOT.

[Give]
abc

[When]
root = ANYNOT('b') ANYNOT('a') ANYNOT('c')?

[Then]
[Group]
    [Ident] a
    [Ident] b


[Test]
Test ANYNOT and + quantifier.

[Give]
"Two"

[When]
root = '"' ANYNOT('"')+ '"'

[Then]
[Group]
    [Ident] "
    [Ident] T
    [Ident] w
    [Ident] o
    [Ident] "


[Test]
Test that ANYNOT will match until 'Two', not including it in the result.

[Give]
OneOneTwoOne

[When]
root = MATCH(ANYNOT('Two')+)

[Then]
[Ident] OneOne


[Test]
Test that ANYNOT matches until EOF.

[Give]
OneOneTwoOne

[When]
root = MATCH(ANYNOT('Three')+)

[Then]
[Ident] OneOneTwoOne


[Test]
Test that ANYNOT returns false if it doesn't advance.

[Give]
OneTwo

[When]
root = ANYNOT('One')

[Then]
[Error]


[Test]
Test SCAN.

[Give]
Hello, {name}! You have {count} messages.

[When]
root = SCAN(tag)
 tag = MATCH('{' '\w+'r '}')

[Then]
[Group]
    [Ident] {name}
    [Ident] {count}


[Test]
Test Type.

[Give]
6+5*(4+3)*2

[When]
expr   = term   ROOT('+'):Opr expr | term
term   = factor ROOT('*'):Opr term | factor
factor = '('i expr ')'i | value:Val
value  = '\d+'r

[Then]
[Opr] +
    [Val] 6
    [Opr] *
        [Val] 5
        [Opr] *
            [Opr] +
                [Val] 4
                [Val] 3
            [Val] 2


[Test]
Test Type and GROUP.

[Give]
abcde

[When]
root = 'a' GROUP('b' 'c' 'd'):G 'e'

[Then]
[Group]
    [Ident] a
    [G]
        [Ident] b
        [Ident] c
        [Ident] d
    [Ident] e


[Test]
Test Type and strings.

[Give]
2+3

[When]
root = num '+':Opr num
 num = '\w+'r:Val

[Then]
[Group]
    [Val] 2
    [Opr] +
    [Val] 3


[Test]
Test MORE true.

[Give]
ab

[When]
root = 'a' MORE

[Then]
[Ident] a


[Test]
Test MORE false.

[Give]
a

[When]
root = 'a' MORE

[Then]
[Error]


[Test]
Test TEXT() without argument.

[Give]
a

[When]
root = TEXT()

[Then]
[Ident]


[Test]
Test TEXT() with plain text argument.

[Give]
a

[When]
root = TEXT('Hello')

[Then]
[Ident] Hello


[Test]
Test TEXT() Example.

[Give]
Key1=Value1
Key2=
Key3=Value3

[When]
root = SCAN( pair )
pair = val '='i ( val | TEXT('Default Value') )
 val = '\w+'r

[Then]
[Group]
    [Ident] Key1
    [Ident] Value1
    [Ident] Key2
    [Ident] Default Value
    [Ident] Key3
    [Ident] Value3


[Test]
Test TEXT() argument cleanup.
If the argument are not being cleaned the last Ident would be "a" too.

[Give]
a

[When]
root = TEXT() 'a' TEXT()

[Then]
[Group]
    [Ident]
    [Ident] a
    [Ident]


[Test]
JOIN must match the tree and return the matched token.
Notice the difference between 'One'+ with and without MATCH.

[Give]
OneOne OneOne

[When]
root = JOIN('One'+) ' 'i 'One'+

[Then]
[Group]
    [Ident] OneOne
    [Ident] One
    [Ident] One


[Test]
Test JOIN() and Ignore.

[Give]
"One \"Two\" Three"

[When]
root = JOIN(str)
 str = '"'i ( ANYNOT('"' | '\\') | '\\'i any )* '"'i

[Then]
[Ident] One "Two" Three


[Test]
Test SAVE and LOAD (Back Reference).

[Give]
<a>hello</a>

[When]
tag = MATCH('<' SAVE(w) '>') ( w | tag )* MATCH('</' LOAD() '>')
  w = '\w+'r

[Then]
[Group]
    [Ident] <a>
    [Ident] hello
    [Ident] </a>


[Test]
Test SAVE and LOAD (Back Reference) recursively (subgroup).

[Give]
<a>hello<b>world</b></a>

[When]
tag = GROUP( MATCH('<' SAVE(w) '>') ( '\w+'r | tag )* MATCH('</' LOAD() '>') )
  w = '\w+'r

[Then]
[Group]
    [Ident] <a>
    [Ident] hello
    [Group]
        [Ident] <b>
        [Ident] world
        [Ident] </b>
    [Ident] </a>


[Test]
Test SAVE and LOAD (Back Reference) recursively with global JOIN.

[Give]
<a>hello<b>world</b></a>

[When]
tag = JOIN( '<' SAVE(w) '>' ( '\w+'r | tag )* '</' LOAD() '>' )
  w = '\w+'r

[Then]
[Ident] <a>hello<b>world</b></a>


[Test]
Test SAVE and LOAD (Back Reference) recursively with global MATCH.

[Give]
<a>hello<b>world</b></a>

[When]
tag = MATCH( '<' SAVE(w) '>' ( '\w+'r | tag )* '</' LOAD() '>' )
  w = '\w+'r

[Then]
[Ident] <a>hello<b>world</b></a>


[Test]
Test SCAN() README example.

[Give]
The standard chunk of Lorem Ipsum used since the 1500s
is reproduced below for those interested. Sections 1.10.32 and
1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also
reproduced in their exact original form, accompanied by English
versions from the 1914 translation by H. Rackham.

[When]
root = SCAN(ver | num)
 num = '\d+'r
 ver = MATCH(num '.' num '.' num)

[Then]
[Group]
    [Ident] 1500
    [Ident] 1.10.32
    [Ident] 1.10.33
    [Ident] 1914


[Test]
Test Example 1 (Expression).

[Give]
6+5*(4+3)*2

[When]
expr   = term   ROOT('+') expr | term
term   = factor ROOT('*') term | factor
factor = '('i expr ')'i | value
value  = '\d+'r

[Then]
[Ident] +
    [Ident] 6
    [Ident] *
        [Ident] 5
        [Ident] *
            [Ident] +
                [Ident] 4
                [Ident] 3
            [Ident] 2


[Test]
Test Example 2 (JSON).

[Give]
{"name":"John","addresses":[{"zip":"111"},{"zip":"222"}]}

[When]
val = obj | arr | str
obj = GROUP( '{'i okv (','i okv)* '}'i ):Object
arr = GROUP( '['i val (','i val)* ']'i ):Array
okv = str ':'i val
str = MATCH( '"' ( ANYNOT('"' | '\\') | '\\' any )* '"' )

[Then]
[Object]
    [Ident] "name"
    [Ident] "John"
    [Ident] "addresses"
    [Array]
        [Object]
            [Ident] "zip"
            [Ident] "111"
        [Object]
            [Ident] "zip"
            [Ident] "222"


[Test]
Test JOIN Example.

[Give]
1+1 2+2 3+3 4+4

[When]
root = (num '+' num) SP JOIN(num '+' num) SP JOIN(num ROOT('+') num) SP JOIN(num '+'i num)
 num = '\d+'r

[Then]
[Group]
    [Ident] 1
    [Ident] +
    [Ident] 1
    [Ident] 2+2
    [Ident] +33
    [Ident] 44


[Test]
Test MATCH Example.

[Give]
1+1 2+2 3+3 4+4

[When]
root = (num '+' num) SP MATCH(num '+' num) SP MATCH(num ROOT('+') num) SP MATCH(num '+'i num)
 num = '\d+'r

[Then]
[Group]
    [Ident] 1
    [Ident] +
    [Ident] 1
    [Ident] 2+2
    [Ident] 3+3
    [Ident] 4+4


[Test]
Test CSV parsing.

[Give]
a;b;c
d;e;f
g;;i

[When]
csv = GROUP(GROUP( MORE row )+)
row = cel ( ';'i cel )* ( NL | EOF )
cel = MATCH(ANYNOT( ';' | NL | EOF )+) | TEXT()

[Then]
[Group]
    [Group]
        [Ident] a
        [Ident] b
        [Ident] c
    [Group]
        [Ident] d
        [Ident] e
        [Ident] f
    [Group]
        [Ident] g
        [Ident]
        [Ident] i


[Test]
Test multiline statements.

[Give]
abcde

[When]
root = 'x'
     | 'x'
     | 'a' next

next = 'x'
     | 'x'
     | 'b' 'c'
       'd'
       'e'

[Then]
[Group]
    [Ident] a
    [Ident] b
    [Ident] c
    [Ident] d
    [Ident] e


[Test]
Test SKIPLINE.

[Give]
Line1 Line1
Line2 Line2
Line3 Line3


[When]
bnf = 'Line1' SKIPLINE
      'Line2' SKIPLINE
      SKIPLINE
      EOF

[Then]
[Group]
    [Ident] Line1
    [Ident] Line2


[Test]
Test that TYPE() does not panic with "index out of range [0] with length 0".

[Give]
b

[When]
bnf = ('a'?):val

[Then]
[Group]


[Test]
Test many ROOT().

[Give]
abcdef

[When]
bnf = ( 'a' ROOT('b') 'c' )  ( 'd' ROOT('e') 'f' )

[Then]
[Group]
    [Ident] b
        [Ident] a
        [Ident] c
    [Ident] e
        [Ident] d
        [Ident] f


[Test]
Test many ROOT().

[Give]
abcde

[When]
bnf = ( 'a' ROOT('b') 'c' )  ( 'd' 'e' )

[Then]
[Group]
    [Ident] b
        [Ident] a
        [Ident] c
    [Ident] d
    [Ident] e
